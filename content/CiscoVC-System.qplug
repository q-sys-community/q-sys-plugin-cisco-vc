-- Plugin for Cisco VC Units by Solo Works London
-- Built in Lua
-- For source, contact https://soloworks.co.uk

PluginInfo = {
    Name = "Cisco~VC~System (0.0.0.0-master)", -- The tilde here indicates folder structure in the Shematic Elements pane
    Version = "0.0.0.0-master",
    Id = "qsysc.cisco.vc.system.0.0.0.0-master", -- show this is just a unique id. Show some commented out 'fun' unique ids
    Description = "Control for Cisco VC Core System Functions (All models)",
    ShowDebug = true,
    Author = "Solo Works London"
}

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
    cisco_light_blue = {0,188,235},
    cisco_dark_blue = {13,39,77},
    White = {255, 255, 255},
    Black = {0, 0, 0},
    Red = {255, 0, 0},
    Green = {0, 255, 0}
}

function GetColor(props)
    return Colors.cisco_light_blue
end

-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
    props = {
        {
            Name = "IP Address",
            Type = "string",
            Value = "127.0.0.1"
        },
        {
            Name = "Username",
            Type = "string",
            Value = "admin"
        },
        {
            Name = "Password",
            Type = "string",
            Value = ""
        }
    }
    return props
end

-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- In this example, when Model 1 is selected in the properties pane, the ability to modify some of the properties will be hidden, only allowing customization with Model 2
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
    return props
end

-- The below function is where you will populate the controls for your plugin.
-- If you've written some of the Runtime code already, simply use the control names you populated in Text Controller/Control Script, and use their Properties to inform the values here
-- ControlType can be Button, Knob, Indicator or Text
-- ButtonType ( ControlType == Button ) can be Momentary, Toggle or Trigger
-- IndicatorType ( ControlType == Indicator ) can be Led, Meter, Text or Status
-- ControlUnit ( ControlType == Knob ) can be Hz, Float, Integer, Pan, Percent, Position or Seconds
function GetControls(props)
    ctls = {
        -- System Pins
        {
            Name = "Online",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "IPAddress",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Both",
            Count = 1,
            UserPin = true
        },
        {
            Name = "Model",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "SerialNumber",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "SoftwareVersion",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        -- Control Pins
        {
            Name = "Gain",
            ControlType = "Knob",
            ControlUnit = "Integer",
            Min = 0,
            Max = 100,
            PinStyle = "Both",
            Count = 1,
            UserPin = true
        },
        {
            Name = "MicMute",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            Count = 1,
            UserPin = true
        },
        {
            Name = "Awake",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "ActiveCall",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "ActiveContent",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        }
    }
    return ctls
end

-- Variable holding Page Names for ease
local pagenames = {"Display"}

-- This function allows you to populate pages in your plugin.
function GetPages(props)
    pages = {}
    table.insert(pages, {name = pagenames[1]})
    return pages
end

-- This function allows you to layout pages in your plugin.
function GetControlLayout(props)
    local layout = {}
    
    local title_size = {224, 32}
    local btn_size = {32, 24}
    local status_groupbox_size = {title_size[1], 6 * btn_size[2]}
    local activity_groupbox_position = {0, title_size[2] + status_groupbox_size[2] + (0.5 * btn_size[2])}
    local activity_groupbox_size = {title_size[1], 4 * btn_size[2]}
    local audio_groupbox_position = {0, activity_groupbox_position[2] + activity_groupbox_size[2] + (0.5 * btn_size[2])}
    local audio_groupbox_size = {title_size[1], 3 * btn_size[2]}

    graphics = {
        {
            Type = "Header",
            Text = "Cisco VC System",
            HTextAlign = "Center",
            Color = Colors.cisco_dark_blue,
            FontSize = 16,
            Position = {0, 0},
            Size = title_size
        },
        {
            Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
            Text = "Status",
            HTextAlign = "Left",
            Fill = Colors.White,
            CornerRadius = 8,
            StrokeColor = Colors.cisco_dark_blue,
            Color = Colors.cisco_dark_blue,
            StrokeWidth = 1,
            Position = {0, title_size[2]},
            Size = status_groupbox_size
        },
        {
            Type = "Text",
            Text = "Online:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.cisco_dark_blue,
            Position = {0, title_size[2] + (0.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "IP Address:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.cisco_dark_blue,
            Position = {0, title_size[2] + (1.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Model:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.cisco_dark_blue,
            Position = {0, title_size[2] + (2.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Serial Number:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.cisco_dark_blue,
            Position = {0, title_size[2] + (3.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Software:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.cisco_dark_blue,
            Position = {0, title_size[2] + (4.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "GroupBox",
            Text = "Activity",
            HTextAlign = "Left",
            Fill = Colors.White,
            CornerRadius = 8,
            StrokeColor = Colors.cisco_dark_blue,
            Color = Colors.cisco_dark_blue,
            StrokeWidth = 1,
            Position = activity_groupbox_position,
            Size = activity_groupbox_size
        },
        {
            Type = "Text",
            Text = "System Awake:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.cisco_dark_blue,
            Position = {0, activity_groupbox_position[2] + (0.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Call Active:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.cisco_dark_blue,
            Position = {0, activity_groupbox_position[2] + (1.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Content Active:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.cisco_dark_blue,
            Position = {0, activity_groupbox_position[2] + (2.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "GroupBox",
            Text = "Audio",
            HTextAlign = "Left",
            Fill = Colors.White,
            CornerRadius = 8,
            StrokeColor = Colors.cisco_dark_blue,
            Color = Colors.cisco_dark_blue,
            StrokeWidth = 1,
            Position = audio_groupbox_position,
            Size = audio_groupbox_size
        },
        {
            Type = "Text",
            Text = "Gain:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.cisco_dark_blue,
            Position = {0, audio_groupbox_position[2] + (0.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Mic Mute:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.cisco_dark_blue,
            Position = {0, audio_groupbox_position[2] + (1.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
    }
    -- System
    layout["Online"] = {
        PrettyName = "System~Online",
        Style = "Indicator",
        Color = {0, 255, 0},
        Position = {3 * btn_size[1], title_size[2] + (0.5 * btn_size[2])},
        Size = {btn_size[2], btn_size[2]}
    }
    layout["IPAddress"] = {
        PrettyName = "System~IP Address",
        Style = "TextBox",
        Position = {3 * btn_size[1], title_size[2] + (1.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["Model"] = {
        PrettyName = "System~Model Name",
        Style = "Text",
        Position = {3 * btn_size[1], title_size[2] + (2.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["SerialNumber"] = {
        PrettyName = "System~Serial Number",
        Style = "Text",
        Position = {3 * btn_size[1], title_size[2] + (3.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["SoftwareVersion"] = {
        PrettyName = "System~Software Version",
        Style = "Text",
        Position = {3 * btn_size[1], title_size[2] + (4.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    --Activity
    layout["Awake"] = {
        PrettyName = "Activity~Awake",
        Style = "Indicator",
        Color = {0, 255, 0},
        Position = {3 * btn_size[1], activity_groupbox_position[2] + (0.5 * btn_size[2])},
        Size = {btn_size[2], btn_size[2]}
    }
    layout["ActiveCall"] = {
        PrettyName = "Activity~Active Call",
        Style = "Indicator",
        Color = {0, 255, 0},
        Position = {3 * btn_size[1], activity_groupbox_position[2] + (1.5 * btn_size[2])},
        Size = {btn_size[2], btn_size[2]}
    }
    layout["ActiveContent"] = {
        PrettyName = "Activity~Content Active",
        Style = "Indicator",
        Color = {0, 255, 0},
        Position = {3 * btn_size[1], activity_groupbox_position[2] + (2.5 * btn_size[2])},
        Size = {btn_size[2], btn_size[2]}
    }
    --Audio
    layout["Gain"] = {
        PrettyName = "Audio~Gain",
        Style = "Fader",
        Position = {3 * btn_size[1], audio_groupbox_position[2] + (0.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["MicMute"] = {
        PrettyName = "Audio~Mic Mute",
        Style = "Button",
        Legend = "Mute",
        Color = {223, 0, 36},
        UnlinkOffColor = false,
        Position = {3 * btn_size[1], audio_groupbox_position[2] + (1.5 * btn_size[2])},
        Size = btn_size
    }
    return layout, graphics
end

-- Components provide a way to save or retain certain settings without necessarily displaying it in another control such as a combobox.
-- For example, the when someone hits the "Save" button on this plugin, it saves the RGB values in the "rgb_storage" component below.
-- This allows us to do things 'under the hood' which gives the plugin a much sleeker feel.
function GetComponents(props)
    return {
        {
            Name = "nic_storage",
            Type = "scriptable_controls",
            Properties = {
                ["config"] = '[{"Name":"Core","ControlType":"Text","ButtonType":"Momentary","TextType":"TextBox","IndicatorType":"Led","ControlUnit":"dB","PinStyle":"None","Min":-100.0,"Max":12.0,"Count":1.0},{"Name":"Emul","ControlType":"Text","ButtonType":"Momentary","TextType":"TextBox","IndicatorType":"Led","ControlUnit":"dB","PinStyle":"None","Min":-100.0,"Max":12.0,"Count":1.0},{"Name":"lastIP","ControlType":"Text","ButtonType":"Momentary","TextType":"TextBox","IndicatorType":"Led","ControlUnit":"dB","PinStyle":"None","Min":-100.0,"Max":12.0,"Count":1.0},{"Name":"lastname","ControlType":"Text","ButtonType":"Momentary","TextType":"TextBox","IndicatorType":"Led","ControlUnit":"dB","PinStyle":"None","Min":-100.0,"Max":12.0,"Count":1.0}]'
            }
        },
        {
            Name = "rgb_storage",
            Type = "scriptable_controls",
            Properties = {
                ["config"] = '[{"Name":"dis1_lastRGB","ControlType":"Text","ButtonType":"Momentary","TextType":"TextBox","IndicatorType":"Led","ControlUnit":"dB","PinStyle":"None","Min":-100.0,"Max":12.0,"Count":1.0}},{"Name":"dis2_lastRGB","ControlType":"Text","ButtonType":"Momentary","TextType":"TextBox","IndicatorType":"Led","ControlUnit":"dB","PinStyle":"None","Min":-100.0,"Max":12.0,"Count":1.0}}]'
            }
        }
    }
end

if Controls then
    -- Local Structure for holding State
    Cisco = {
        Host = "",
        Port = 22,
        Username = "",
        Password = "",
        NumberOfActiveCalls = 0,
        NumberOfInProgressCalls = 0,
        NumberOfSuspendedCalls = 0
    }

    ssh = Ssh.New()
    ssh.ReconnectTimeout = 5

    -- Create and setup Connection Timeout (Not handled by ssh properly)
    timerTimeout = Timer.New()

    timerTimeout.EventHandler = function(timer)
        print("Timeout Triggered")
        ssh:Disconnect()
        timerTimeout:Stop()
    end

    function fnInitTimeout()
        print("Starting Timout")
        timerTimeout:Stop()
        timerTimeout:Start(5)
    end

    -- Subscribe to the Rx channel
    function subHandlerRx(name, data)
        -- print("Tx::" .. data)
        fnSend(data)
    end

    -- Create and setup Polling
    timerPoll = Timer.New()

    timerPoll.EventHandler = function(timer)
        print("Polling Triggered")
        fnPoll()
    end

    function fnInitPoll()
        timerPoll:Stop()
        timerPoll:Start(20)
    end

    function fnPoll()
        if ssh.IsConnected then
            fnSend('xCommand Peripherals Heartbeat ID: "' .. "Q-SYS-" .. System.LockingId .. '"')
            -- Start Timeout
            fnInitTimeout()
        else
            fnConnect()
        end
    end

    -- Send Data
    function fnSend(data)
        --print("-->VC::" .. data)
        ssh:Write(data .. "\x0A")
        -- Restart Poll
        fnInitPoll()
    end

    -- Helper Function - Open TCP Connection
    function fnConnect()
        ssh:Connect(Cisco.Host, Cisco.Port, Cisco.Username, Cisco.Password)
        Controls.IPAddress.String = Cisco.Host .. ":" .. Cisco.Port
    end

    -- Setup Event Handlers
    for k, v in pairs(Controls) do
        -- Setup Event Handler (IP Address Pin)
        if k == "MicMute" then
            v.EventHandler = function(changedControl)
                print("MicMute Event: " .. changedControl.Value)
                if changedControl.Boolean == true then
                    fnSend("xCommand Audio Microphones Mute") -- Mic Mute ON
                else
                    fnSend("xCommand Audio Microphones UnMute") -- Mic Mute OFF
                end
            end
        end
        if k == "Gain" then
            v.EventHandler = function(changedControl)
                print("Set gain: " .. math.floor(v.Value))
                fnSend("xCommand Audio Volume Set Level: " .. math.floor(v.Value))
            end
        end
    end

    ssh.Connected = function()
        print("Connection::Online")
    end

    ssh.Reconnect = function()
        print("Connection::Reconnect")
    end

    ssh.Closed = function()
        print("Connection::Closed")
        Controls.Online.Boolean = false
        Notifications.Publish(Cisco.Host .. "-" .. "Connection", "Offline")
    end

    ssh.LoginFailed = function()
        print("Connection::LoginFailed")
    end

    ssh.Error = function(s, err)
        print("Connection::Error::", err)
    end

    ssh.Timeout = function()
        print("Connection::Timeout")
    end

    -- Helper Function to split down commands from the system
    function fnGetChunk(line)
        x, y = line:find(" ")
        if x == nil then
            return line, ""
        else
            return line:sub(1, x - 1), line:sub(x + 1)
        end
    end

    ssh.Data = function()
        --print("Connection::Data---STX")
        line = ssh:ReadLine(TcpSocket.EOL.Any)
        while line do
            print("VC-->::", line)
            Notifications.Publish(Cisco.Host .. "-" .. "Rx", line)
            if line == "*r Login successful" then
                Controls.Online.Boolean = true
                Notifications.Publish(Cisco.Host .. "-" .. "Connection", "Online")
                -- Register this Control System as a Peripheral (For Cisco side info)
                msg = "xCommand Peripherals Connect"
                msg = msg .. ' ID: "' .. "Q-SYS-" .. System.LockingId .. '"'
                msg = msg .. ' Name: "Q-Sys Control System"'
                msg = msg .. ' NetworkAddress: "' .. Network.Interfaces()[1].Address .. '"'
                msg = msg .. ' SerialNumber: "' .. "TBC-123-TBC" .. '"'
                msg = msg .. ' SoftwareInfo: "' .. System.Version .. '"'
                msg = msg .. ' HardwareInfo: "' .. "TBC-CoreModel-TBC" .. '"'
                msg = msg .. " Type: ControlSystem"
                fnSend(msg)
                -- Register for everything
                fnSend("xfeedback register /Event")
                fnSend("xfeedback register /Status")
                -- Request Initial Data
                fnSend("xStatus Standby")
                fnSend("xStatus SystemUnit")
                -- Start Polling
                fnInitPoll()
            else
                chunk, line = fnGetChunk(line)
                if chunk == "*s" then
                    chunk, line = fnGetChunk(line)
                    if chunk == "SystemUnit" then
                        chunk, line = fnGetChunk(line)
                        if chunk == "Software" then
                            chunk, line = fnGetChunk(line)
                            if chunk == "Version:" then
                                Controls.SoftwareVersion.String = line:sub(2, -2)
                            end
                        elseif chunk == "ProductPlatform:" then
                            Controls.Model.String = line:sub(2, -2)
                        elseif chunk == "Hardware" then
                            chunk, line = fnGetChunk(line)
                            if chunk == "Module" then
                                chunk, line = fnGetChunk(line)
                                if chunk == "SerialNumber:" then
                                    Controls.SerialNumber.String = line:sub(2, -2)
                                end
                            end
                        elseif chunk == "State" then
                            chunk, line = fnGetChunk(line)
                            if chunk == "NumberOfActiveCalls:" then
                                Cisco.NumberOfActiveCalls = tonumber(line)
                            elseif chunk == "NumberOfInProgressCalls:" then
                                Cisco.NumberOfInProgressCalls = tonumber(line)
                            elseif chunk == "NumberOfSuspendedCalls:" then
                                Cisco.NumberOfSuspendedCalls = tonumber(line)
                            end
                            Controls.ActiveCall.Boolean =
                                (Cisco.NumberOfActiveCalls + Cisco.NumberOfInProgressCalls +
                                Cisco.NumberOfSuspendedCalls) >
                                0
                        end
                    elseif chunk == "Standby" then
                        chunk, line = fnGetChunk(line)
                        if chunk == "State:" then
                            Controls.Awake.Boolean = line ~= "Standby"
                        end
                    elseif chunk == "Audio" then
                        chunk, line = fnGetChunk(line)
                        if chunk == "Microphones" then
                            chunk, line = fnGetChunk(line)
                            if chunk == "Mute:" then
                                if line == "On" then
                                    Controls.MicMute.Boolean = true
                                elseif line == "Off" then
                                    Controls.MicMute.Boolean = false
                                end
                            end
                        end
                    elseif chunk == "Conference" then
                    end
                elseif chunk == "*e" then
                    chunk, line = fnGetChunk(line)
                    if chunk == "PresentationStarted" or chunk == "PresentationPreviewStarted" then
                        Controls.ActiveContent.Boolean = true
                    elseif chunk == "PresentationStopped" or chunk == "PresentationPreviewStopped" then
                        Controls.ActiveContent.Boolean = false
                    end
                elseif chunk == "*r" then
                    chunk, line = fnGetChunk(line)
                    if chunk == "PeripheralsHeartBeatResult" then
                        -- Cancel Timeout
                        print("Stopping Timeout")
                        timerTimeout:Stop()
                    end
                end
            end
            line = ssh:ReadLine(TcpSocket.EOL.Any)
        end
        --print("Connection::Data---ETX")
    end

    -- Set IP address from Properties if present
    if Properties then
        Cisco.Username = Properties["Username"].Value
        Cisco.Password = Properties["Password"].Value
        if Properties["IP Address"].Value ~= "" then
            Cisco.Host = Properties["IP Address"].Value
            fnConnect()
        else
            print("IP Address Property Not Set")
        end
    end

    -- Subscribe to Tx Notifications
    print("Subscribing to " .. Cisco.Host .. "-" .. "Tx")
    Notifications.Subscribe(Cisco.Host .. "-" .. "Tx", subHandlerRx)

    fnConnect()
end
